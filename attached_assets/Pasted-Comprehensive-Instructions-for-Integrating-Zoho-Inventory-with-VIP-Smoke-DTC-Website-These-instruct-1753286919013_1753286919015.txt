Comprehensive Instructions for Integrating Zoho Inventory with VIP Smoke DTC Website
These instructions provide a detailed, step-by-step guide for your coding agent to implement a secure API integration between Zoho Inventory (under BMB Wholesale's account, Organization ID: 850205569) and the VIP Smoke direct-to-consumer (DTC) website. The integration focuses on real-time inventory synchronization, order processing, and compliance features such as age verification, shipping restrictions, and handling of high-risk products. This is based on Zoho Inventory's REST API with OAuth 2.0 authentication, as of Wednesday, July 23, 2025.

The setup assumes a server-side implementation (e.g., Node.js, Python, or PHP) for the website backend. Use HTTPS for all communications to ensure security, especially given the high-risk nature of products like tobacco and CBD in Palm Desert, CA, where state regulations may apply. Test in a sandbox environment before going live to comply with federal laws like the PACT Act.

Prerequisites
Before starting, ensure the following are available:

Zoho Inventory admin access for app registration.

Website backend environment with support for HTTP requests (e.g., Axios in Node.js or requests in Python).

Third-party services for compliance: Age verification API (e.g., AgeChecker.net), shipping validation (e.g., ShipStation or USPS API).

Secure storage for sensitive credentials (e.g., environment variables or a vault like AWS Secrets Manager).

Step 1: Register the App in Zoho API Console
Register a server-based application to obtain OAuth credentials for API access.

Navigate to https://api-console.zoho.com (US domain for accounts in Palm Desert, CA).

Log in with BMB Wholesale's Zoho credentials.

Click Add Client and select Server-based Application.

Enter app details:

Client Name: "VIP Smoke DTC Integration".

Homepage URL: Your website's URL (e.g., https://vip-smoke.com).

Authorized Redirect URIs: Your callback endpoint (e.g., https://vip-smoke.com/zoho-callback).

Select scopes: ZohoInventory.FullAccess, ZohoInventory.inventory.READ, ZohoInventory.inventory.UPDATE, ZohoInventory.salesorders.CREATE, ZohoInventory.contacts.UPDATE.

Submit to generate Client ID and Client Secret. Store these securely.

Step 2: Implement OAuth 2.0 Authentication
Generate and manage tokens for API authorization. Use a library like oauth2-client in Node.js or oauthlib in Python.

2.1 Generate Authorization Grant Code
Construct the authorization URL:

text
https://accounts.zoho.com/oauth/v2/auth?scope=ZohoInventory.FullAccess&client_id=[Client ID]&state=testing&response_type=code&redirect_uri=[Redirect URI]&access_type=offline
Redirect users (or simulate in testing) to this URL.

After authorization, capture the grant code from the redirect URL's query parameters (e.g., code=1000.xxxx).

2.2 Obtain Access and Refresh Tokens
Make a POST request to https://accounts.zoho.com/oauth/v2/token:

json
{
  "code": "[Grant Code]",
  "client_id": "[Client ID]",
  "client_secret": "[Client Secret]",
  "redirect_uri": "[Redirect URI]",
  "grant_type": "authorization_code"
}
Parse the response for access_token, refresh_token, and expires_in.

2.3 Refresh Access Token
Implement a function to refresh tokens automatically:

json
POST https://accounts.zoho.com/oauth/v2/token
{
  "refresh_token": "[Refresh Token]",
  "client_id": "[Client ID]",
  "client_secret": "[Client Secret]",
  "grant_type": "refresh_token"
}
Schedule refreshes before expiration (e.g., every 50 minutes).

Step 3: Configure API Endpoints and Data Mapping
Use the Organization ID (850205569) in all requests. Include the access token in headers: Authorization: Zoho-oauthtoken [Access Token].

3.1 Key API Endpoints
Get Inventory Items: GET /inventory/v1/items?organization_id=850205569 – Fetch stock levels and custom fields (e.g., DTC Product Description, MSRP, Club Discount).

Create Sales Order: POST /inventory/v1/salesorders?organization_id=850205569 – Process DTC orders with JSON payload including line items, customer details, and compliance flags.

Update Stock: POST /inventory/v1/stock_adjustments?organization_id=850205569 – Deduct inventory after order confirmation.

Get Warehouses: GET /inventory/v1/warehouses?organization_id=850205569 – Retrieve VIP Smoke's assigned warehouse ID.

3.2 Data Mapping for Custom Fields
Map website fields to Zoho custom fields:

Website Field	Zoho Custom Field ID	Data Type	Purpose
Product Description	cf_dtc_description	Text	Consumer-facing details
Suggested Retail Price	cf_msrp	Currency	Pricing for DTC sales
Member Discount	cf_club_discount	Decimal	Loyalty program rates
Age Required	cf_age_required	Checkbox	Compliance flag
Restricted States	cf_restricted_states	Multi-select	Shipping bans
Retrieve field IDs via GET /inventory/v1/settings/customfields?organization_id=850205569.

Step 4: Implement Real-Time Inventory Synchronization
Set up webhooks in Zoho (Settings > Automations > Webhooks) to notify your website of changes (e.g., stock updates).

Create an endpoint on your site to receive webhook payloads and update local cache.

For polling fallback: Schedule cron jobs to query /items endpoint every 5-10 minutes, respecting rate limits (1000 calls/day).

Step 5: Integrate Compliance Features
Age Verification: Before order creation, call a third-party API (e.g., AgeChecker) with customer DOB and IP. Add a custom field check in Zoho workflows.

Shipping Restrictions: Validate addresses against restricted states using USPS API. Block orders via conditional logic in your backend before POST to /salesorders.

High-Risk Product Handling: Tag items with risk levels; implement server-side checks to enforce regulations (e.g., no sales to minors under federal law).

Step 6: Order Processing Workflow
On website checkout:

Query stock: GET /items/{item_id}?organization_id=850205569.

Validate compliance (age, shipping).

Create order: POST /salesorders with payload including custom fields.

Adjust stock: POST /stock_adjustments if order confirmed.

Handle errors: Implement retries for 429 (rate limit) or 401 (token expired) responses.

Step 7: Testing and Deployment
Unit Tests: Mock API responses for token generation, inventory queries, and order creation.

Sandbox Mode: Use Zoho's sandbox to test without affecting live data.

Compliance Audit: Simulate restricted scenarios (e.g., underage attempt) and log results.

Monitoring: Add logging for API calls; set alerts for failures.

Deployment: Roll out in stages, starting with a subset of products.

Potential Challenges and Solutions
Rate Limiting: Use exponential backoff for retries.

Token Management: Store refresh tokens securely; never expose in client-side code.

Compliance Risks: Consult legal experts for Palm Desert, CA-specific rules on high-risk products.

This completes the integration process. Once implemented, monitor for updates to Zoho's API. If needed, contact Zoho Support during PDT business hours for assistance.