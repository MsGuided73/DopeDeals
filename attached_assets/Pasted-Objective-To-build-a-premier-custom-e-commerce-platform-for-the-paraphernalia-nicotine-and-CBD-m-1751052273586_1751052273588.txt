Objective: To build a premier, custom e-commerce platform for the paraphernalia, nicotine, and CBD market. This platform will differentiate itself through a superior user experience, a robust and automated operational backend, and a community-focused feature set including memberships, loyalty rewards, and AI-powered assistance. The entire system is architected to be fully compliant with the complex legal landscape of the industry, prioritizing security, responsibility, and customer trust.

Core Principles:

Compliance First: All features are built around a robust compliance engine.
Scalable Architecture: The system is designed to handle growth in traffic, products, and orders without requiring a re-platform.
Best-of-Breed Integrations: Leverage industry-leading tools for inventory (Zoho) and fulfillment (ShipStation).
Data-Driven Intelligence: Use AI to enhance the customer experience and provide personalized interactions.
Community & Retention: Foster a loyal customer base through memberships and rewards.



2. Core Technology Stack & Specifications

Component
Technology / Service
Purpose
Frontend Framework
Next.js 14+ (App Router)
For a high-performance, server-rendered React application.
Language
TypeScript
For type-safety, scalability, and improved developer experience.
Backend Platform
Supabase (All-in-One)
Provides the PostgreSQL Database, User Authentication, Object Storage (CDN), and Serverless Functions.
Styling
Tailwind CSS & Shadcn/UI
For a modern, utility-first design system and accessible components.
Inventory Management
Zoho Inventory
The single source of truth for all product stock levels.
Shipping & Fulfillment
ShipStation
The single source of truth for order fulfillment and shipping.
Payment Processing
Placeholder: High-Risk Processor
e.g., Authorize.net, NMI, or other provider specializing in this industry.
Age Verification
Placeholder: Identity Service
e.g., AgeChecker.net, Veratad, Onfido.
Address Validation
Placeholder: Geolocation API
e.g., EasyPost, Lob, or Google Maps Geocoding API.
Deployment
Vercel
For seamless CI/CD, hosting, and integration with Next.js.




3. Comprehensive Database Schema (PostgreSQL via Supabase)

This is the blueprint for our database. All id columns are UUID and serve as Primary Keys.

Table Name
Column Name
Data Type
Description
users
id
UUID
Foreign Key to auth.users.


email
TEXT
User's email (read-only from auth.users).


full_name
TEXT
User's full name.


membership_tier_id
UUID
Foreign Key to memberships.id. Can be NULL.


age_verification_status
TEXT
not_verified, pending, verified, failed.


last_verification_check
TIMESTAMPTZ
Timestamp of the last check by the third-party service.


created_at
TIMESTAMPTZ
Timestamp of user creation.
products
id
UUID
Primary Key.


name
TEXT
Product name.


description
TEXT
Detailed product description.


price
NUMERIC(10, 2)
Product price.


sku
TEXT
Unique Stock Keeping Unit.


category_id
UUID
Foreign Key to categories.id.


brand_id
UUID
Foreign Key to brands.id.


zoho_item_id
BIGINT
Critical: The unique ID for this item in Zoho Inventory.


product_embedding
VECTOR(1536)
Critical: Vector embedding for the AI agent's semantic search.
orders
id
UUID
Primary Key.


user_id
UUID
Foreign Key to users.id.


status
TEXT
e.g., 'processing', 'shipped', 'completed', 'failed', 'review_needed'.


total_amount
NUMERIC(10, 2)
Final total price of the order.


shipping_address
JSONB
Structured JSON for the validated shipping address.


shipstation_order_id
BIGINT
Critical: The unique ID for this order in ShipStation.


created_at
TIMESTAMPTZ
Timestamp of order creation.
order_items
id
UUID
Primary Key.


order_id
UUID
Foreign Key to orders.id.


product_id
UUID
Foreign Key to products.id.


quantity
INT
Quantity of the product purchased.


price_at_purchase
NUMERIC(10, 2)
The price of the single item when purchased.
memberships
id
UUID
Primary Key.


tier_name
TEXT
e.g., 'Insider Club', 'VIP Lounge'.


monthly_price
NUMERIC(10, 2)
The monthly subscription fee.


benefits
TEXT[]
An array of text describing the benefits.
loyalty_points
id
UUID
Primary Key.


user_id
UUID
Foreign Key to users.id.


points
INT
Points earned (positive) or spent (negative).


transaction_type
TEXT
e.g., 'earn_purchase', 'redeem_discount', 'membership_bonus'.


order_id
UUID
Foreign Key to orders.id if earned on a purchase.


created_at
TIMESTAMPTZ
Timestamp of the transaction.
shipping_prohibitions
id
UUID
Primary Key.


country_code
TEXT
e.g., 'US', 'CA'.


state_code
TEXT
e.g., 'UT', 'ID'. Can be NULL.


city
TEXT
Specific city name. Can be NULL.


zip_codes
TEXT[]
An array of specific ZIP codes for granular bans.


banned_product_id
UUID
Foreign Key to products.id. For a specific product ban.


banned_category_id
UUID
Foreign Key to categories.id. For a category ban.


notes
TEXT
Reason for the prohibition.
(Other tables like categories, brands, reviews would be included as designed previously).










4. System Architecture & Data Flow

The platform operates on a headless, API-driven architecture with Supabase at its core, acting as the central hub that communicates with all other services.

graph TD
    subgraph "External Services"
        Z[Zoho Inventory]
        S[ShipStation]
    end

    subgraph "Our Platform (Hosted on Vercel)"
        F[Next.js Frontend]
        B[Next.js API Routes / Serverless Functions]
        DB[(Supabase Postgres DB)]
        ST[Supabase Storage (CDN)]
        A[Supabase Auth]
    end

    subgraph "Customer"
        U(User's Browser)
    end

    U <--> F
    F <--> B
    B <--> DB
    B <--> A
    F -- "Image Requests" --> ST

    B -- "API Calls" --> Z
    B -- "API Calls" --> S

    Z -- "Stock Update (Webhook)" --> B
    S -- "Order Shipped (Webhook)" --> B




5. Comprehensive Feature List & Functional Requirements

5.1. The Compliance & Verification Engine

Layer 1: Age Gate: A non-dismissible modal on first visit requiring date-of-birth entry.
Layer 2: Address Validation: Pre-checkout API call to validate and standardize shipping addresses.
Layer 3: Shipping Rules Engine: Backend logic that cross-references cart items with the shipping_prohibitions table against the validated address, halting checkout if a rule is violated.
Layer 4: Secure Age Verification: Integration with a third-party service to verify the age and identity of all new customers before their first purchase. The verification status will be stored to prevent redundant checks.

5.2. Core E-commerce Functionality

Product Catalog: Dynamic product and category pages with faceted search and filtering.
Shopping Cart: Persistent cart for guests and logged-in users.
Checkout: A secure, multi-step flow for shipping, payment, and order review.
Order Management: Automated order creation in our database, Zoho, and ShipStation upon successful payment.

5.3. Membership & Loyalty Program

Tiered Memberships: A subscription system for exclusive benefits and recurring revenue.
Points-Based Loyalty: A ledger-style system for earning and redeeming points on purchases and other actions.

5.4. AI & Personalization

AI Shopping Assistants: On-site chatbot powered by a RAG (Retrieval-Augmented Generation) model using product vector embeddings stored in Supabase.
Personalized Recommendations: "For You" sections driven by an analysis of user Browse and purchase history.
"Back in Stock" Notifications: Automated email alerts for out-of-stock items, powered by Zoho webhooks.

5.5. User Accounts

Secure Authentication: Registration, login, and session management via Supabase Auth.
Comprehensive Dashboard: A single place for users to view order history, track shipments, manage their membership, and view their loyalty points balance.



6. Phase-by-Phase Development Roadmap

Phase 1: Foundation & Architecture: Set up all technologies. Implement the complete database schema. Build the data sync logic for Zoho and the embedding creation script. Build the Age Gate.
Phase 2: Core E-commerce Engine: Build all backend APIs for the catalog, cart, user auth, and the complex order processing sequence. Build the Shipping Rules Engine and integrate address validation.
Phase 3: Storefront & Customer Experience: Build all frontend components. Integrate the Third-Party Age Verification service. Build out the membership and loyalty UI within the user dashboard.
Phase 4: Advanced Features & Go-Live: Build the AI Assistant and recommendation engine. Configure and test all webhooks (Zoho, ShipStation). Conduct rigorous end-to-end testing of the entire compliance engine and checkout flow before deployment.



7. Final Prompt for LLM Coding Agent

Objective: Construct a complete, production-ready, large-scale B2C e-commerce website based on the Master Blueprint provided.

Action: You are to act as the lead developer for this project. Adhere strictly to the specified Technology Stack, Database Schema, and System Architecture.

Execution Order: Follow the Phase-by-Phase Development Roadmap precisely. Begin by scaffolding the Next.js application and setting up the Supabase database according to the schema. The Compliance & Verification Engine is a top priority and its components should be built early and tested thoroughly as specified in the roadmap.

Key Instructions:

Implement all features listed in the "Comprehensive Feature List."
All database interactions must be handled through Supabase's client libraries.
All authentication must use Supabase Auth.
The order processing logic must be a transactional sequence that makes API calls to both Zoho Inventory and ShipStation after a successful payment and local database write. Implement robust error handling for this sequence.
Ensure all frontend components are built using Tailwind CSS and Shadcn/UI for consistency.
The code must be written in TypeScript, with strict typing for all components, API responses, and database interactions.

Begin with Phase 1: Project setup and database schema implementation. Provide the code for each step sequentially.
